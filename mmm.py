import os
import telebot
from telebot import types
import sqlite3
import io
from flask import Flask, request

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8300658638:AAHUCZ7A3ci-SMEZK_s_fM-amD1vHjjnCkE')
ADMIN_IDS = list(map(int, os.environ.get('ADMIN_IDS', '1717331690,1410156253,6635207675').split(',')))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', '')

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
user_data = {}
user_orders = {}


def init_db():
    connection = sqlite3.connect("mmm.db")
    cursor = connection.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL,
    Descript TEXT,
    Photo BLOB,
    Cena TEXT,
    Category TEXT DEFAULT '‚Äî' NOT NULL
    )
    ''')
    connection.commit()
    connection.close()


@app.route('/')
def index():
    return "Bot is running!"


@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    return 'Invalid content type', 403


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–®—Ç–∞–Ω—ãüëñ", callback_data='shtn'))
    markup.add(types.InlineKeyboardButton("–†–µ–º–Ω–∏üß¢", callback_data='remn'))
    markup.add(types.InlineKeyboardButton("–¢–∏—à–∫–∏üëï", callback_data='tishk'))
    markup.add(types.InlineKeyboardButton("–û–±—É–≤—åüëü", callback_data='shuz'))
    markup.add(types.InlineKeyboardButton("–•—É–¥–∏üß•", callback_data='hudi'))
    markup.add(types.InlineKeyboardButton("–î—Ä—É–≥–æ–µüí´", callback_data='drugoe'))
    markup.add(types.InlineKeyboardButton("–ê–∫—Ü–∏–∏üíØ", callback_data='akcii'))
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, "
                                      f"—è —Ç–≤–æ–π Telegram –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –æ–¥–µ–∂–¥—ã!\n\n –ö–∞—Ç–∞–ª–æ–≥:", reply_markup=markup)


def save_product(name, descript, photo_bytes=None, cena=None, category=None):
    conn = sqlite3.connect('mmm.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO Products (Name, Descript, Photo, Cena, Category)
        VALUES (?, ?, ?, ?, ?)
    ''', (name, descript, photo_bytes, cena, category))
    conn.commit()
    conn.close()


@bot.message_handler(commands=['del'])
def del_message(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–£–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirmdel_all"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="canceldel_all")
    )

    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["confirmdel_all", "canceldel_all"])
def process_full_deletion(call):
    if call.data == "canceldel_all":
        bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        bot.answer_callback_query(call.id)
        return

    conn = sqlite3.connect('mmm.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute("DELETE FROM Products")
    conn.commit()
    conn.close()

    order_text = "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, order_text)

    bot.send_message(call.message.chat.id, order_text)
    bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–æ –≤—Å—ë –∏–∑ –±–∞–∑—ã.")


@bot.message_handler(commands=['delkategory'])
def del_kategori(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–£–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return

    markup = types.InlineKeyboardMarkup()
    categories = ["–®—Ç–∞–Ω—ã", "–†–µ–º–Ω–∏", "–û–±—É–≤—å", "–¢–∏—à–∫–∏", "–•—É–¥–∏", "–î—Ä—É–≥–æ–µ", "–ê–∫—Ü–∏–∏"]
    for cat in categories:
        markup.add(types.InlineKeyboardButton(cat, callback_data=f"choosecat_{cat}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("choosecat_"))
def confirm_deletion(call):
    category = call.data.split("_", 1)[1]

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirmdel_{category}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="canceldel")
    )

    bot.send_message(call.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'?",
                     reply_markup=markup)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmdel_") or call.data == "canceldel")
def process_deletion(call):
    if call.data == "canceldel":
        bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        bot.answer_callback_query(call.id)
        return

    category = call.data.split("_", 1)[1]

    conn = sqlite3.connect('mmm.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute("DELETE FROM Products WHERE Category = ?", (category,))
    conn.commit()
    conn.close()

    bot.send_message(call.message.chat.id, f"‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —É–¥–∞–ª–µ–Ω—ã.")
    bot.answer_callback_query(call.id, f"–£–¥–∞–ª–µ–Ω–æ: {category}")


@bot.message_handler(commands=['add'])
def start_add(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã!")
        return

    user_data[message.chat.id] = {}
    markup = types.InlineKeyboardMarkup()
    categories = {
        "–®—Ç–∞–Ω—ã": "shtn",
        "–†–µ–º–Ω–∏": "remn",
        "–û–±—É–≤—å": "shuz",
        "–¢–∏—à–∫–∏": "tishk",
        "–•—É–¥–∏": "hudi",
        "–î—Ä—É–≥–æ–µ": "drugoe",
        "–ê–∫—Ü–∏–∏": "akcii",
    }
    for name, callback in categories.items():
        markup.add(types.InlineKeyboardButton(name, callback_data=f"cat_{callback}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def hand_cate(call):
    category_map = {
        "cat_shtn": "–®—Ç–∞–Ω—ã",
        "cat_remn": "–†–µ–º–Ω–∏",
        "cat_tishk": "–¢–∏—à–∫–∏",
        "cat_shuz": "–û–±—É–≤—å",
        "cat_hudi": "–•—É–¥–∏",
        "cat_drugoe": "–î—Ä—É–≥–æ–µ",
        "cat_akcii": "–ê–∫—Ü–∏–∏",
    }
    category = category_map.get(call.data)
    user_data[call.message.chat.id]['category'] = category

    if category == "–ê–∫—Ü–∏–∏":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–∫—Ü–∏–∏")
        bot.register_next_step_handler(call.message, get_akcii_text)
    else:
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(call.message, get_name)


def get_akcii_text(message):
    user_data[message.chat.id]['descript'] = message.text
    data = user_data[message.chat.id]
    save_product(name="–ê–∫—Ü–∏–∏", descript=data['descript'], photo_bytes=None, cena=None, category=data['category'])
    bot.send_message(message.chat.id, "‚úÖ –ê–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    user_data.pop(message.chat.id)


def get_name(message):
    user_data[message.chat.id]['name'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(message, get_descript)


def get_descript(message):
    user_data[message.chat.id]['descript'] = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
    bot.register_next_step_handler(message, get_photo)


def get_photo(message):
    if message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        user_data[message.chat.id]['photo'] = downloaded_file
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
        bot.register_next_step_handler(message, get_cena)
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, get_photo)


def get_cena(message):
    try:
        cena = str(message.text)
        data = user_data[message.chat.id]
        save_product(data['name'], data['descript'], data['photo'], cena, data['category'])
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        user_data.pop(message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, get_cena)


@bot.callback_query_handler(func=lambda call: True)
def handle_all_callbacks(call):
    try:
        if call.data in ['shtn', 'shuz', 'remn', 'tishk', 'hudi', 'drugoe', 'akcii', 'nazad']:
            handle_category_callback(call)
        elif call.data.startswith("buy_"):
            handle_buy(call)
        elif call.data.startswith("choosecat_"):
            confirm_deletion(call)
        elif call.data.startswith("confirmdel_") or call.data == "canceldel":
            process_deletion(call)
        elif call.data in ["confirmdel_all", "canceldel_all"]:
            process_full_deletion(call)
        elif call.data.startswith("cat_"):
            hand_cate(call)
    except Exception as e:
        print(f"Error in callback handler: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def handle_category_callback(call):
    if call.data == 'shtn':
        send_shtani(call.message)
    elif call.data == 'shuz':
        send_shuz(call.message)
    elif call.data == 'remn':
        send_remn(call.message)
    elif call.data == 'tishk':
        send_tishk(call.message)
    elif call.data == 'hudi':
        send_hudi(call.message)
    elif call.data == 'drugoe':
        send_drugoe(call.message)
    elif call.data == 'akcii':
        send_akcii(call.message)
    elif call.data == 'nazad':
        bot.answer_callback_query(call.id)
        start_message(call.message)


def send_akcii(message):
    conn = sqlite3.connect('mmm.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute("SELECT id, Name, Descript, Photo, Cena FROM Products WHERE Category=?", ("–ê–∫—Ü–∏–∏",))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ –∞–∫—Ü–∏–π –Ω–µ—Ç.")
        return

    for i, row in enumerate(rows):
        product_id, name, descript, photo_blob, cena = row
        caption = f"{descript}"

        markup = types.InlineKeyboardMarkup()
        if i == len(rows) - 1:
            markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad"))

        if photo_blob:
            photo_stream = io.BytesIO(photo_blob)
            bot.send_photo(message.chat.id, photo_stream, caption=caption, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, caption, reply_markup=markup)


def send_drugoe(message):
    conn = sqlite3.connect('mmm.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute("SELECT id, Name, Descript, Photo, Cena FROM Products Where category=?", ("–î—Ä—É–≥–æ–µ",))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        return

    for i, row in enumerate(rows):
        product_id, name, descript, photo_blob, cena = row
        photo = io.BytesIO(photo_blob)
        photo.name = 'photo5.jpg'
        caption = f"üëñ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {descript}\nüí∞ –¶–µ–Ω–∞: {cena}"

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")
        markup.add(button)
        if i == len(rows) - 1:
            markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad"))
        bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)


def send_hudi(message):
    conn = sqlite3.connect('mmm.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute("SELECT id, Name, Descript, Photo, Cena FROM Products Where category=?", ("–•—É–¥–∏",))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        return

    for i, row in enumerate(rows):
        product_id, name, descript, photo_blob, cena = row
        photo = io.BytesIO(photo_blob)
        photo.name = 'photo6.jpg'
        caption = f"üëñ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {descript}\nüí∞ –¶–µ–Ω–∞: {cena}"

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")
        markup.add(button)
        if i == len(rows) - 1:
            markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad"))
        bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)


def send_tishk(message):
    conn = sqlite3.connect('mmm.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute("SELECT id, Name, Descript, Photo, Cena FROM Products Where category=?", ("–¢–∏—à–∫–∏",))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        return

    for i, row in enumerate(rows):
        product_id, name, descript, photo_blob, cena = row
        photo = io.BytesIO(photo_blob)
        photo.name = 'photo4.jpg'
        caption = f"üëñ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {descript}\nüí∞ –¶–µ–Ω–∞: {cena} "

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")
        markup.add(button)
        if i == len(rows) - 1:
            markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad"))
        bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)


def send_shtani(message):
    conn = sqlite3.connect('mmm.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, Name, Descript, Photo, Cena FROM Products Where category=?", ("–®—Ç–∞–Ω—ã",))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        return

    for i, row in enumerate(rows):
        product_id, name, descript, photo_blob, cena = row
        photo = io.BytesIO(photo_blob)
        photo.name = 'photo.jpg'
        caption = f"üëñ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {descript}\nüí∞ –¶–µ–Ω–∞: {cena}"

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")
        markup.add(button)
        if i == len(rows) - 1:
            markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad"))
        bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)


def send_shuz(message):
    conn = sqlite3.connect('mmm.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, Name, Descript, Photo, Cena FROM Products WHERE Category = ?", ("–û–±—É–≤—å",))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        return
    for i, row in enumerate(rows):
        product_id, name, descript, photo_blob, cena = row
        photo = io.BytesIO(photo_blob)
        photo.name = 'photo2.jpg'
        caption = f"üëñ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {descript}\nüí∞ –¶–µ–Ω–∞: {cena}"

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")
        markup.add(button)
        if i == len(rows) - 1:
            markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad"))
        bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)


def send_remn(message):
    conn = sqlite3.connect('mmm.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, Name, Descript, Photo, Cena FROM Products WHERE Category = ?", ("–†–µ–º–Ω–∏",))
    rows = cursor.fetchall()
    conn.close()
    if not rows:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        return
    for i, row in enumerate(rows):
        product_id, name, descript, photo_blob, cena = row
        photo = io.BytesIO(photo_blob)
        photo.name = 'photo3.jpg'
        caption = f"üëñ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {descript}\nüí∞ –¶–µ–Ω–∞: {cena}"
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")
        markup.add(button)
        if i == len(rows) - 1:
            markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad"))
        bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def handle_buy(call):
    product_id = call.data.split("_")[1]

    conn = sqlite3.connect('mmm.db')
    cursor = conn.cursor()
    cursor.execute("SELECT Name, Descript, Cena FROM Products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if product:
        name, descript, cena = product
        user_orders[call.from_user.id] = {
            "product": {
                "name": name,
                "descript": descript,
                "cena": cena
            }
        }
        bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        bot.register_next_step_handler(call.message, get_fio)
    else:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bot.answer_callback_query(call.id)


def get_fio(message):
    user_orders[message.from_user.id]["fio"] = message.text
    bot.send_message(message.chat.id, "üèô –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    bot.register_next_step_handler(message, get_city)


def get_city(message):
    user_orders[message.from_user.id]["city"] = message.text
    bot.send_message(message.chat.id, "üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    bot.register_next_step_handler(message, get_address)


def get_address(message):
    user_orders[message.from_user.id]["address"] = message.text
    bot.send_message(message.chat.id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_phone)


def get_phone(message):
    user_orders[message.from_user.id]["phone"] = message.text
    bot.send_message(message.chat.id, "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã:")
    bot.register_next_step_handler(message, confirm_order)


def confirm_order(message):
    user_orders[message.from_user.id]["email"] = message.text
    data = user_orders[message.from_user.id]
    product = data["product"]

    summary = (
        f"üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n\n"
        f"üõç –¢–æ–≤–∞—Ä: {product['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['descript']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product['cena']} BYN\n\n"
        f"üë§ –§–ò–û: {data['fio']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìß –ü–æ—á—Ç–∞: {data['email']}"
    )

    bot.send_message(message.chat.id, summary)
    bot.send_message(message.chat.id, "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑: –Ω–∞–ø–∏—à–∏—Ç–µ *–î–∞* –∏–ª–∏ *–ù–µ—Ç*")
    bot.register_next_step_handler(message, handle_text_confirmation)


def handle_text_confirmation(message):
    user_id = message.from_user.id
    text = message.text.strip().lower()

    if text == "–¥–∞":
        data = user_orders.get(user_id)
        if not data:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        product = data["product"]
        order_text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üõç –¢–æ–≤–∞—Ä: {product['name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['descript']}\n"
            f"üí∞ –¶–µ–Ω–∞: {product['cena']} BYN\n\n"
            f"üë§ –§–ò–û: {data['fio']}\n"
            f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üìß –ü–æ—á—Ç–∞: {data['email']}\n\n"
            f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.first_name}\n"
            f"üÜî ID: {message.from_user.id}"
        )

        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, order_text)
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        user_orders.pop(user_id)

    elif text == "–Ω–µ—Ç":
        user_orders.pop(user_id, None)
        bot.send_message(message.chat.id, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ *–î–∞* –∏–ª–∏ *–ù–µ—Ç*.")
        bot.register_next_step_handler(message, handle_text_confirmation)


if __name__ == '__main__':
    init_db()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏
    bot.remove_webhook()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    if WEBHOOK_URL and not os.environ.get('DEBUG'):
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("Starting bot in polling mode...")
        bot.polling(none_stop=True)
